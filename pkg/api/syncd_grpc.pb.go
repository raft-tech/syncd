// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: api/syncd.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SyncClient is the client API for Sync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SyncClient interface {
	Check(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Info, error)
	Push(ctx context.Context, opts ...grpc.CallOption) (Sync_PushClient, error)
	Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Sync_PullClient, error)
	Acknowledge(ctx context.Context, opts ...grpc.CallOption) (Sync_AcknowledgeClient, error)
}

type syncClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncClient(cc grpc.ClientConnInterface) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) Check(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/syncd.Sync/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *syncClient) Push(ctx context.Context, opts ...grpc.CallOption) (Sync_PushClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[0], "/syncd.Sync/Push", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncPushClient{stream}
	return x, nil
}

type Sync_PushClient interface {
	Send(*Record) error
	Recv() (*RecordStatus, error)
	grpc.ClientStream
}

type syncPushClient struct {
	grpc.ClientStream
}

func (x *syncPushClient) Send(m *Record) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncPushClient) Recv() (*RecordStatus, error) {
	m := new(RecordStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncClient) Pull(ctx context.Context, in *PullRequest, opts ...grpc.CallOption) (Sync_PullClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[1], "/syncd.Sync/Pull", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncPullClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Sync_PullClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type syncPullClient struct {
	grpc.ClientStream
}

func (x *syncPullClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *syncClient) Acknowledge(ctx context.Context, opts ...grpc.CallOption) (Sync_AcknowledgeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[2], "/syncd.Sync/Acknowledge", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncAcknowledgeClient{stream}
	return x, nil
}

type Sync_AcknowledgeClient interface {
	Send(*RecordStatus) error
	CloseAndRecv() (*AcknowledgeResponse, error)
	grpc.ClientStream
}

type syncAcknowledgeClient struct {
	grpc.ClientStream
}

func (x *syncAcknowledgeClient) Send(m *RecordStatus) error {
	return x.ClientStream.SendMsg(m)
}

func (x *syncAcknowledgeClient) CloseAndRecv() (*AcknowledgeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AcknowledgeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SyncServer is the server API for Sync service.
// All implementations must embed UnimplementedSyncServer
// for forward compatibility
type SyncServer interface {
	Check(context.Context, *Info) (*Info, error)
	Push(Sync_PushServer) error
	Pull(*PullRequest, Sync_PullServer) error
	Acknowledge(Sync_AcknowledgeServer) error
	mustEmbedUnimplementedSyncServer()
}

// UnimplementedSyncServer must be embedded to have forward compatible implementations.
type UnimplementedSyncServer struct {
}

func (UnimplementedSyncServer) Check(context.Context, *Info) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedSyncServer) Push(Sync_PushServer) error {
	return status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedSyncServer) Pull(*PullRequest, Sync_PullServer) error {
	return status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedSyncServer) Acknowledge(Sync_AcknowledgeServer) error {
	return status.Errorf(codes.Unimplemented, "method Acknowledge not implemented")
}
func (UnimplementedSyncServer) mustEmbedUnimplementedSyncServer() {}

// UnsafeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServer will
// result in compilation errors.
type UnsafeSyncServer interface {
	mustEmbedUnimplementedSyncServer()
}

func RegisterSyncServer(s grpc.ServiceRegistrar, srv SyncServer) {
	s.RegisterService(&Sync_ServiceDesc, srv)
}

func _Sync_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Info)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SyncServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/syncd.Sync/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SyncServer).Check(ctx, req.(*Info))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sync_Push_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).Push(&syncPushServer{stream})
}

type Sync_PushServer interface {
	Send(*RecordStatus) error
	Recv() (*Record, error)
	grpc.ServerStream
}

type syncPushServer struct {
	grpc.ServerStream
}

func (x *syncPushServer) Send(m *RecordStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncPushServer) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sync_Pull_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PullRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServer).Pull(m, &syncPullServer{stream})
}

type Sync_PullServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type syncPullServer struct {
	grpc.ServerStream
}

func (x *syncPullServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

func _Sync_Acknowledge_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SyncServer).Acknowledge(&syncAcknowledgeServer{stream})
}

type Sync_AcknowledgeServer interface {
	SendAndClose(*AcknowledgeResponse) error
	Recv() (*RecordStatus, error)
	grpc.ServerStream
}

type syncAcknowledgeServer struct {
	grpc.ServerStream
}

func (x *syncAcknowledgeServer) SendAndClose(m *AcknowledgeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *syncAcknowledgeServer) Recv() (*RecordStatus, error) {
	m := new(RecordStatus)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Sync_ServiceDesc is the grpc.ServiceDesc for Sync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "syncd.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _Sync_Check_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Push",
			Handler:       _Sync_Push_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Pull",
			Handler:       _Sync_Pull_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Acknowledge",
			Handler:       _Sync_Acknowledge_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/syncd.proto",
}
