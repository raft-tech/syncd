{{- if .Values.dbInitJob.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "things.fullname" . | trunc 55 | printf "%s-db-init" }}
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
  labels:
    {{ include "things.labels" . | nindent 4 }}
spec:
  activeDeadlineSeconds: 300
  ttlSecondsAfterFinished: 600
  template:
    metadata:
      labels: {{ include "things.labels" . | nindent 8 }}
    spec:
{{- if .Values.dbInitJob.initContainer.enabled }}
      initContainers:
        - name: "wait"
          image: {{ include "things.dbInitJob.initContainer" . }}
          command:
            - /bin/bash
          args:
            - "-c"
            - "while ! pg_isready -d $(PG_CONNECTION); do echo waiting for database to be come ready; sleep 5; done"
          env:
            - name: PG_USERNAME
              value: {{ .Values.global.postgresql.auth.username }}
            - name: PG_SERVICE
              value: {{ .Values.global.postgresql.auth.service  | default (printf "%s-postgresql" .Release.Name) }}
            - name: PG_DATABASE
              value: {{ .Values.global.postgresql.auth.database }}
            - name: PG_CONNECTION
              value: {{ .Values.global.postgresql.auth.connection }}
          envFrom:
            - prefix: PG_
              secretRef:
                name: {{.Values.global.postgresql.auth.secretRef }}
{{- end }}
      containers:
        - name: "psql"
          image: {{ include "things.dbInitJob.container" . }}
          command:
            - /opt/bitnami/postgresql/bin/psql
            - $(PG_CONNECTION)
          args:
            - "--file"
            - "/config/schema.sql"
          env:
            - name: PG_USERNAME
              value: {{ .Values.global.postgresql.auth.username }}
            - name: PG_SERVICE
              value: {{ .Values.global.postgresql.auth.service  | default (printf "%s-postgresql" .Release.Name) }}
            - name: PG_DATABASE
              value: {{ .Values.global.postgresql.auth.database }}
            - name: PG_CONNECTION
              value: {{ .Values.global.postgresql.auth.connection }}
          envFrom:
            - prefix: PG_
              secretRef:
                name: {{.Values.global.postgresql.auth.secretRef }}
          volumeMounts:
            - mountPath: /config
              name: config
      restartPolicy: Never
      volumes:
        - name: config
          configMap:
            name: {{ include "things.fullname" . | printf "%s-syncd-db" |trunc 63 }}
{{- end }}