{{ if .Values.server.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "syncd.serverFullname" . }}
  labels:
    {{- include "syncd.serverLabels" . | nindent 4 }}
spec:
  {{- if not .Values.server.autoscaling.enabled }}
  replicas: {{ .Values.server.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "syncd.serverSelectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "syncd.serverSelectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- else }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      securityContext:
        {{- with .Values.securityContext }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ default .Values.image.tag .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /syncd
            - serve
          args:
            - --config
            - /config/server.yaml
          env:
            {{- if and .Values.auth.preSharedKey.enabled .Values.auth.preSharedKey.fromExistingSecret }}
            - name: SYNCD_AUTH_PRESHARED_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.auth.preSharedKey.existingSecret.name }}
                  key: {{ .Values.auth.preSharedKey.existingSecret.key }}
            {{- end }}
            {{- if .Values.graph.source.postgres.connection.fromPreExistingSecret }}
            {{- with .Values.graph.source.postgres.connection.preExistingSecret }}
            - name: SYNCD_POSTGRES_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .hostKey }}
            - name: SYNCD_POSTGRES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .usernameKey }}
            - name: SYNCD_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .passwordKey }}
            - name: SYNCD_POSTGRES_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .name }}
                  key: {{ .databaseKey }}
            {{- end }}
            {{- end }}
            - name: SYNCD_POSTGRESQL_CONN
              value: "postgres://$(SYNCD_POSTGRES_USERNAME):$(SYNCD_POSTGRES_PASSWORD)@$(SYNCD_POSTGRES_HOST)/$(SYNCD_POSTGRES_DATABASE)"
          {{- if not .Values.graph.source.postgres.connection.fromPreExistingSecret }}
          envFrom:
            - secretRef:
                name: {{ include "syncd.serverFullname" . }}
              prefix: SYNCD_
          {{- end }}
          ports:
            - name: grpc
              containerPort: {{- if .Values.server.tls.enabled }} 8443 {{- else }} 8080 {{- end }}
              protocol: TCP
            - name: http-metrics
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http-metrics
          readinessProbe:
            httpGet:
              path: /healthz/ready
              port: http-metrics
          {{- with .Values.server.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - mountPath: /config
              name: config
            {{- if .Values.server.tls.enabled }}
            - mountPath: /config/tls
              name: cert
              readOnly: true
            {{- end }}
            {{- if or .Values.server.tls.trustedCAs.fromExistingConfigMap (not (empty .Values.server.tls.trustedCAs.values)) }}
            - mountPath: /config/tls/roots
              name: trusted-roots
              readOnly: true
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ include "syncd.serverFullname" . }}
        {{- if .Values.server.tls.enabled }}
        - name: cert
          secret:
            secretName:
              {{- if .Values.server.tls.fromExistingSecret }} {{ .Values.server.tls.existingSecret.name }}
              {{- else }} {{ include "syncd.serverFullname" . | trunc 58 | trimSuffix "-" | printf "%s-cert" }}
              {{- end }}
        {{- if or .Values.server.tls.trustedCAs.fromExistingConfigMap (not (empty .Values.server.tls.trustedCAs)) }}
        - name: trusted-roots
          configMap:
            name:
            {{- if .Values.server.tls.trustedCAs.fromExistingConfigMap }} {{ .Values.server.tls.trustedCAs.existingConfigMap.name }}
            {{- else }} {{ include "syncd.serverFullname" . | trunc 60 | trimSuffix "-" | printf "%s-ca" }}
            {{- end }}
        {{- end }}
        {{- end }}
{{- end }}